#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//char OperationCheck(char input[]);
void Initial();
void LD(char filename[]);
void Test();
void SW();

typedef struct Node {
    char *value;
    struct Node *prev;
    struct Node *next;
}Node;

Node* head = NULL;
Node* createCard(char* value);
void createDeck();
void printList(Node* head);
void createDeckFile(char filename[]);


const char* values[52] = {"AC", "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "TC", "JC", "QC", "KC",
                        "AD", "2D", "3D", "4D", "5D", "6D", "7D", "8D", "9D", "TD", "JD", "QD", "KD",
                        "AH", "2H", "3H", "4H", "5H", "6H", "7H", "8H", "9H", "TH", "JH", "QH", "KH",
                        "AS", "2S", "3S", "4S", "5S", "6S", "7S", "8S", "9S", "TS", "JS", "QS", "KS"};

int main(void) {
    Initial();

    char Input[100];
    char Operation[20];    //Initializing Operation
    char ExtraOperation[20];

    //exit program if operation is QQ
    while (strcmp(Operation, "QQ") != 0) {


        //Takes inputs from the terminal and puts it in our Input array
        if (fgets(Input, sizeof(Input), stdin) != NULL) {

            //returns the number of inputs succesfully assigned and matched from our input array.
            //If there is only one string in our Input, then will Operation only be assigned, and it
            //will return 1.
            int Operations = sscanf(Input, "%s %s", Operation, ExtraOperation);

            if ((Operations == 1) && (strcmp(Operation, "LD") == 0)) {
                LD("None");
            } else if ((Operations == 2) && (strcmp(Operation, "LD") == 0)) {
                LD(ExtraOperation);
            }else if ((Operations == 1) && (strcmp(Operation, "SW") == 0)) {
                SW();
            }
        }
    }
}

void Initial( ) {
    printf("c1\tc2\tc3\tc4\tc5\tc6\tc7\n"
           "\t\t\t\t\t\t\t[]\tF1\n\n"
           "\t\t\t\t\t\t\t[]\tF2\n\n"
           "\t\t\t\t\t\t\t[]\tF3\n\n"
           "\t\t\t\t\t\t\t[]\tF4\n\n"
           "LAST Command: \n"
           "Message: \n"
           "INPUT >");
}


void LD(char filename[]){

    if (strcmp(filename, "None") == 0) {

        createDeck();

        printf("c1\tc2\tc3\tc4\tc5\tc6\tc7\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF1\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF2\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF3\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF4\n"
           "[]\t[]\t[]\t\t\t\t\t\n"
           "LAST Command: LD\n"
           "Message: OK\n"
           "INPUT >");
    }else{
        createDeckFile(filename);
        if (head == NULL) {
            printf("c1\tc2\tc3\tc4\tc5\tc6\tc7\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF1\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF2\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF3\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
           "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF4\n"
           "[]\t[]\t[]\t\t\t\t\t\n"
           "LAST Command: LD\n"
           "Message: ERROR: no existing file.\n"
           "INPUT >");
        }else {
            printf("c1\tc2\tc3\tc4\tc5\tc6\tc7\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF1\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF2\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF3\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\n"
               "[]\t[]\t[]\t[]\t[]\t[]\t[]\t[]\tF4\n"
               "[]\t[]\t[]\t\t\t\t\t\n"
               "LAST Command: LD\n"
               "Message: OK\n"
               "INPUT >");
        }
    }
}


Node* createCard(char* value) {

    Node* newCard = (Node*)malloc(sizeof(Node));

    newCard->value = (char*)malloc(strlen(value) + 1);  // +1 for '\0'

    strcpy(newCard->value, value);

    newCard -> next = NULL;
    newCard -> prev = NULL;

    return newCard;
}

void createDeck() {
    Node* previous = NULL;

    for (int i = 0; i < 52; i++) {
        Node* newCard = createCard(values[i]);
        if (i==0) {
            newCard->prev = NULL;
            head = newCard;
            previous = newCard;
        }else {
            if (i == 51) {
                newCard->next = NULL;
            }
            previous->next = newCard;
            newCard->prev = previous;
            previous = newCard;
        }
    }
}

void createDeckFile(char filename[]) {

    FILE* file = fopen(filename,"r");

    char Deckarray[52][3];

    for (int i = 0; i<52;i++) {
        fscanf(file,"%s", &Deckarray[i]);
    }

    fclose(file);

    Node* previous = NULL;

    for (int i = 0; i < 52; i++) {
        Node* newCard = createCard(Deckarray[i]);
        if (i==0) {
            newCard->prev = NULL;
            head = newCard;
            previous = newCard;
        }else {
            if (i == 51) {
                newCard->next = NULL;
            }
            previous->next = newCard;
            newCard->prev = previous;
            previous = newCard;
        }
    }
}

void SW() {
    Node* temp = head;

    printf("c1\tc2\tc3\tc4\tc5\tc6\tc7\n\n");
    for (int row = 0; row < 8; row++) {
        for (int column = 0; column < 7; column++) {
            if ((column < 3 && row < 8) || (column >= 3 && row < 7)) {
                if (temp) {
                    printf("%s\t", temp->value);
                    temp = temp->next;
                } else {
                    printf("\t");
                }
            } else {
                printf("\t");
            }
        }
        printf("\n");
    }
}
