
#define SDL_MAIN_USE_CALLBACKS_1
#define SDL_WINDOW_RESIZABLE
#include <stdio.h>
#include <SDL3/SDL_main.h>
#include <SDL3/SDL.h>


static SDL_Window *window = NULL;
static SDL_Renderer *renderer = NULL;
static SDL_Cursor *data = 0;
static SDL_Cursor *mask = 1;
int w = 20;
int h = 20;
int hot_x = 10;
int hot_y = 10;
//funktion som kÃ¸rer en gang ved startup
SDL_AppResult SDL_AppInit(void**appstate,int argc, char *argv[]) {
    SDL_SetAppMetadata("Yukon", "1.0 ", "Yukon");

    if (!SDL_Init(SDL_INIT_VIDEO)) {
        SDL_Log("Couldn't start SDL: %s", SDL_GetError());
        return SDL_APP_FAILURE;
    }

    if (!SDL_CreateWindow("Yukon",1080,800,SDL_WINDOW_RESIZABLE)) {
        SDL_Log("GG: %s", SDL_GetError());
        return SDL_APP_FAILURE;
    }
    bool SDL_SetWindowResizable(SDL_Window *window, bool resizable);
    return SDL_APP_CONTINUE;
}

SDL_AppResult SDL_AppEvent(void *appstate,SDL_Event *event) {
    if (event->type==SDL_EVENT_QUIT) {
        return SDL_APP_SUCCESS;
    }
    return SDL_APP_CONTINUE;
}

SDL_AppResult SDL_AppIterate(void *appstate) {
    //en timer der skifter farve hvert sekund
    const double now = ((double)SDL_GetTicks())/1000.0;

    //farver jeg ikke bruger
    const float red = (float) (0.5+0.5 * SDL_sin(now));
    const float green = (float) (0.5+0.5 * SDL_sin(now + SDL_PI_D * 2/3));
    const float blue = (float) (0.5+0.5 * SDL_sin(now + SDL_PI_D * 4/3));

    //Vi har heller ikke brug for vores render funktioner
    /*SDL_SetRenderColorScale(renderer,red);

    SDL_RenderClear(renderer);

    SDL_RenderPresent(renderer);*/
    bool SDL_CaptureMouse(bool enabled);

    SDL_Cursor * SDL_CreateCursor(const Uint8 *data,
                         const Uint8 *mask,
                         int w, int h, int hot_x,
                         int hot_y);

    return SDL_APP_CONTINUE;
    }



void SDL_AppQuit(void *appstate,SDL_AppResult result) {

}
